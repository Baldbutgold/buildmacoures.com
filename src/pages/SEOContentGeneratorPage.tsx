import React, { useState } from 'react';
import { Container } from '../components/Container';
import { Button } from '../components/Button';
import { Search, Target, FileText, Loader2, Copy, Download, CheckCircle, Sparkles } from 'lucide-react';

interface SEOContentRequest {
  contentType: 'blog-post' | 'meta-description' | 'landing-page' | 'product-description' | 'faq' | 'social-media';
  topic: string;
  targetKeywords: string[];
  audience?: string;
  tone?: 'professional' | 'casual' | 'authoritative' | 'friendly' | 'educational';
  wordCount?: number;
  includeSchema?: boolean;
}

interface GeneratedContent {
  content: string;
  contentType: string;
  topic: string;
  targetKeywords: string[];
  title?: string;
  metaDescription?: string;
  options?: string[];
  sections?: any;
  generatedAt: string;
}

export const SEOContentGeneratorPage = () => {
  const [formData, setFormData] = useState<SEOContentRequest>({
    contentType: 'blog-post',
    topic: '',
    targetKeywords: [],
    audience: 'Course creators and online educators',
    tone: 'professional',
    wordCount: 1500,
    includeSchema: false
  });
  
  const [keywordInput, setKeywordInput] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState<GeneratedContent | null>(null);
  const [error, setError] = useState('');
  const [copiedSection, setCopiedSection] = useState<string | null>(null);

  const contentTypes = [
    { value: 'blog-post', label: 'Blog Post', description: 'SEO-optimized blog articles' },
    { value: 'meta-description', label: 'Meta Descriptions', description: 'Search result snippets' },
    { value: 'landing-page', label: 'Landing Page', description: 'Conversion-focused pages' },
    { value: 'faq', label: 'FAQ Section', description: 'Question & answer content' },
    { value: 'social-media', label: 'Social Media', description: 'Multi-platform posts' }
  ];

  const tones = [
    { value: 'professional', label: 'Professional' },
    { value: 'casual', label: 'Casual' },
    { value: 'authoritative', label: 'Authoritative' },
    { value: 'friendly', label: 'Friendly' },
    { value: 'educational', label: 'Educational' }
  ];

  const addKeyword = () => {
    if (keywordInput.trim() && !formData.targetKeywords.includes(keywordInput.trim())) {
      setFormData(prev => ({
        ...prev,
        targetKeywords: [...prev.targetKeywords, keywordInput.trim()]
      }));
      setKeywordInput('');
    }
  };

  const removeKeyword = (keyword: string) => {
    setFormData(prev => ({
      ...prev,
      targetKeywords: prev.targetKeywords.filter(k => k !== keyword)
    }));
  };

  const handleKeywordKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addKeyword();
    }
  };

  const generateContent = async () => {
    if (!formData.topic.trim()) {
      setError('Please enter a topic');
      return;
    }
    
    if (formData.targetKeywords.length === 0) {
      setError('Please add at least one target keyword');
      return;
    }

    setIsGenerating(true);
    setError('');

    try {
      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
      const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

      const response = await fetch(`${supabaseUrl}/functions/v1/generate-seo-content`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${supabaseAnonKey}`,
          'Content-Type': 'application/json',
          'apikey': supabaseAnonKey,
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Server error (${response.status}): ${errorText || 'Unknown error'}`);
      }

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'Failed to generate content');
      }

      setGeneratedContent(result.data);
    } catch (err) {
      console.error('Generation error:', err);
      setError(err instanceof Error ? err.message : 'Failed to generate content');
    } finally {
      setIsGenerating(false);
    }
  };

  const copyToClipboard = async (text: string, section: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedSection(section);
      setTimeout(() => setCopiedSection(null), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const downloadContent = () => {
    if (!generatedContent) return;

    const content = `SEO Content Generated by BuildMaCourse
Generated on: ${new Date(generatedContent.generatedAt).toLocaleDateString()}
Content Type: ${generatedContent.contentType}
Topic: ${generatedContent.topic}
Keywords: ${generatedContent.targetKeywords.join(', ')}

${generatedContent.content}

---
Generated by BuildMaCourse SEO Content Generator
https://buildmacourse.com
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `seo-content-${formData.contentType}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-brand-black via-gray-900 to-brand-black pt-20 sm:pt-24 lg:pt-32">
      <Container>
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="text-center mb-10">
            <div className="inline-flex items-center gap-2 bg-brand-purple/20 text-brand-purple px-4 py-2 rounded-full text-sm font-medium mb-4">
              <Search className="w-4 h-4" />
              SEO Content Generator
            </div>
            <h1 className="text-3xl sm:text-4xl font-bold text-brand-white mb-3 font-bricolage">
              AI-Powered SEO Content Creation
            </h1>
            <p className="text-brand-gray max-w-2xl mx-auto">
              Generate high-ranking, conversion-focused content optimized for search engines and your audience.
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Form Section */}
            <div className="bg-gradient-to-br from-brand-black/50 to-gray-900/50 backdrop-blur-sm rounded-2xl p-6 sm:p-8 border border-brand-purple/20 shadow-2xl">
              <h2 className="text-xl font-bold text-brand-white mb-6">Content Configuration</h2>
              
              <div className="space-y-6">
                {/* Content Type */}
                <div>
                  <label className="block text-sm font-semibold text-brand-white mb-3">
                    Content Type
                  </label>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                    {contentTypes.map((type) => (
                      <label 
                        key={type.value}
                        className={`flex flex-col p-4 rounded-xl cursor-pointer transition-all duration-200 ${
                          formData.contentType === type.value 
                            ? 'bg-brand-purple/20 border border-brand-purple/40' 
                            : 'bg-brand-black/30 border border-transparent hover:bg-brand-black/50'
                        }`}
                      >
                        <div className="flex items-center gap-2 mb-1">
                          <input
                            type="radio"
                            name="contentType"
                            value={type.value}
                            checked={formData.contentType === type.value}
                            onChange={(e) => setFormData(prev => ({ ...prev, contentType: e.target.value as any }))}
                            className="sr-only"
                          />
                          <span className="text-brand-white font-medium text-sm">{type.label}</span>
                        </div>
                        <span className="text-brand-gray text-xs">{type.description}</span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Topic */}
                <div>
                  <label htmlFor="topic" className="block text-sm font-semibold text-brand-white mb-3">
                    Topic / Subject
                  </label>
                  <input
                    type="text"
                    id="topic"
                    value={formData.topic}
                    onChange={(e) => setFormData(prev => ({ ...prev, topic: e.target.value }))}
                    placeholder="e.g., How to create an online course that sells"
                    className="w-full px-4 py-3 bg-brand-black/50 border border-brand-purple/20 rounded-xl text-brand-white placeholder-brand-gray/30 focus:border-brand-purple focus:ring-2 focus:ring-brand-purple/20 transition-all duration-200"
                  />
                </div>

                {/* Target Keywords */}
                <div>
                  <label className="block text-sm font-semibold text-brand-white mb-3">
                    Target Keywords
                  </label>
                  <div className="flex gap-2 mb-3">
                    <input
                      type="text"
                      value={keywordInput}
                      onChange={(e) => setKeywordInput(e.target.value)}
                      onKeyPress={handleKeywordKeyPress}
                      placeholder="Enter a keyword and press Enter"
                      className="flex-1 px-4 py-2 bg-brand-black/50 border border-brand-purple/20 rounded-lg text-brand-white placeholder-brand-gray/30 focus:border-brand-purple focus:ring-2 focus:ring-brand-purple/20 transition-all duration-200"
                    />
                    <button
                      onClick={addKeyword}
                      className="px-4 py-2 bg-brand-purple hover:bg-brand-purple-dark text-white rounded-lg transition-colors"
                    >
                      Add
                    </button>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {formData.targetKeywords.map((keyword, index) => (
                      <span
                        key={index}
                        className="inline-flex items-center gap-2 bg-brand-purple/20 text-brand-purple px-3 py-1 rounded-full text-sm"
                      >
                        {keyword}
                        <button
                          onClick={() => removeKeyword(keyword)}
                          className="text-brand-purple hover:text-red-400 transition-colors"
                        >
                          ×
                        </button>
                      </span>
                    ))}
                  </div>
                </div>

                {/* Tone */}
                <div>
                  <label className="block text-sm font-semibold text-brand-white mb-3">
                    Tone & Style
                  </label>
                  <select
                    value={formData.tone}
                    onChange={(e) => setFormData(prev => ({ ...prev, tone: e.target.value as any }))}
                    className="w-full px-4 py-3 bg-brand-black/50 border border-brand-purple/20 rounded-xl text-brand-white focus:border-brand-purple focus:ring-2 focus:ring-brand-purple/20 transition-all duration-200"
                  >
                    {tones.map((tone) => (
                      <option key={tone.value} value={tone.value}>
                        {tone.label}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Word Count (for blog posts) */}
                {formData.contentType === 'blog-post' && (
                  <div>
                    <label htmlFor="wordCount" className="block text-sm font-semibold text-brand-white mb-3">
                      Target Word Count
                    </label>
                    <input
                      type="number"
                      id="wordCount"
                      value={formData.wordCount}
                      onChange={(e) => setFormData(prev => ({ ...prev, wordCount: parseInt(e.target.value) }))}
                      min="500"
                      max="5000"
                      step="100"
                      className="w-full px-4 py-3 bg-brand-black/50 border border-brand-purple/20 rounded-xl text-brand-white focus:border-brand-purple focus:ring-2 focus:ring-brand-purple/20 transition-all duration-200"
                    />
                  </div>
                )}

                {/* Schema Markup */}
                <div className="flex items-center gap-3">
                  <input
                    type="checkbox"
                    id="includeSchema"
                    checked={formData.includeSchema}
                    onChange={(e) => setFormData(prev => ({ ...prev, includeSchema: e.target.checked }))}
                    className="w-4 h-4 text-brand-purple bg-brand-black/50 border-brand-purple/20 rounded focus:ring-brand-purple focus:ring-2"
                  />
                  <label htmlFor="includeSchema" className="text-sm text-brand-white">
                    Include Schema Markup (JSON-LD)
                  </label>
                </div>

                {/* Generate Button */}
                <Button
                  variant="primary"
                  size="lg"
                  onClick={generateContent}
                  disabled={isGenerating || !formData.topic.trim() || formData.targetKeywords.length === 0}
                  className="w-full shadow-purple-lg hover:shadow-purple transform hover:-translate-y-1"
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                      Generating Content...
                    </>
                  ) : (
                    <>
                      <Sparkles className="w-5 h-5 mr-2" />
                      Generate SEO Content
                    </>
                  )}
                </Button>

                {/* Error Display */}
                {error && (
                  <div className="bg-red-500/10 border border-red-500/20 rounded-xl p-4">
                    <p className="text-red-400 text-sm">{error}</p>
                  </div>
                )}
              </div>
            </div>

            {/* Results Section */}
            <div className="bg-gradient-to-br from-brand-black/50 to-gray-900/50 backdrop-blur-sm rounded-2xl p-6 sm:p-8 border border-brand-purple/20 shadow-2xl">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-brand-white">Generated Content</h2>
                {generatedContent && (
                  <button
                    onClick={downloadContent}
                    className="inline-flex items-center gap-2 text-brand-purple hover:text-brand-purple-dark transition-colors"
                  >
                    <Download className="w-4 h-4" />
                    Download
                  </button>
                )}
              </div>

              {!generatedContent ? (
                <div className="text-center py-12">
                  <FileText className="w-16 h-16 text-brand-gray/30 mx-auto mb-4" />
                  <p className="text-brand-gray">
                    Configure your content settings and click "Generate SEO Content" to get started.
                  </p>
                </div>
              ) : (
                <div className="space-y-6">
                  {/* Meta Information */}
                  {(generatedContent.title || generatedContent.metaDescription) && (
                    <div className="bg-brand-black/30 rounded-xl p-4">
                      <h3 className="text-brand-purple font-semibold mb-3">SEO Meta Information</h3>
                      
                      {generatedContent.title && (
                        <div className="mb-3">
                          <div className="flex items-center justify-between mb-1">
                            <span className="text-sm text-brand-gray">Title Tag</span>
                            <button
                              onClick={() => copyToClipboard(generatedContent.title!, 'title')}
                              className="text-brand-purple hover:text-brand-purple-dark transition-colors"
                            >
                              {copiedSection === 'title' ? <CheckCircle className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                            </button>
                          </div>
                          <p className="text-brand-white text-sm bg-brand-black/50 p-3 rounded-lg">
                            {generatedContent.title}
                          </p>
                        </div>
                      )}
                      
                      {generatedContent.metaDescription && (
                        <div>
                          <div className="flex items-center justify-between mb-1">
                            <span className="text-sm text-brand-gray">Meta Description</span>
                            <button
                              onClick={() => copyToClipboard(generatedContent.metaDescription!, 'meta')}
                              className="text-brand-purple hover:text-brand-purple-dark transition-colors"
                            >
                              {copiedSection === 'meta' ? <CheckCircle className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                            </button>
                          </div>
                          <p className="text-brand-white text-sm bg-brand-black/50 p-3 rounded-lg">
                            {generatedContent.metaDescription}
                          </p>
                        </div>
                      )}
                    </div>
                  )}

                  {/* Meta Description Options */}
                  {generatedContent.options && (
                    <div className="bg-brand-black/30 rounded-xl p-4">
                      <h3 className="text-brand-purple font-semibold mb-3">Meta Description Options</h3>
                      <div className="space-y-3">
                        {generatedContent.options.map((option, index) => (
                          <div key={index} className="bg-brand-black/50 p-3 rounded-lg">
                            <div className="flex items-center justify-between mb-1">
                              <span className="text-sm text-brand-gray">Option {index + 1}</span>
                              <button
                                onClick={() => copyToClipboard(option, `option-${index}`)}
                                className="text-brand-purple hover:text-brand-purple-dark transition-colors"
                              >
                                {copiedSection === `option-${index}` ? <CheckCircle className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                              </button>
                            </div>
                            <p className="text-brand-white text-sm">{option}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Main Content */}
                  <div className="bg-brand-black/30 rounded-xl p-4">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="text-brand-purple font-semibold">Generated Content</h3>
                      <button
                        onClick={() => copyToClipboard(generatedContent.content, 'content')}
                        className="text-brand-purple hover:text-brand-purple-dark transition-colors"
                      >
                        {copiedSection === 'content' ? <CheckCircle className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                      </button>
                    </div>
                    <div className="bg-brand-black/50 p-4 rounded-lg max-h-96 overflow-y-auto">
                      <pre className="text-brand-white text-sm whitespace-pre-wrap font-sans">
                        {generatedContent.content}
                      </pre>
                    </div>
                  </div>

                  {/* Content Info */}
                  <div className="text-center text-sm text-brand-gray">
                    Generated on {new Date(generatedContent.generatedAt).toLocaleDateString()} • 
                    Keywords: {generatedContent.targetKeywords.join(', ')}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* CTA Section */}
          <div className="mt-16 text-center">
            <div className="bg-gradient-to-r from-brand-purple to-brand-purple-dark text-white p-6 sm:p-8 lg:p-12 rounded-2xl shadow-purple-lg">
              <h2 className="text-2xl sm:text-3xl font-bold mb-4 font-bricolage">
                Need Professional Content Creation?
              </h2>
              <p className="text-lg sm:text-xl text-purple-100 mb-8 max-w-2xl mx-auto">
                While this tool helps with SEO content, we also create complete course content, sales pages, and marketing materials as part of our done-for-you service.
              </p>
              <button 
                onClick={() => window.location.href = '/book-call'}
                className="inline-flex items-center gap-3 bg-white text-brand-purple px-6 sm:px-8 py-3 sm:py-4 rounded-full font-bold text-base sm:text-lg hover:bg-gray-50 transition-all duration-300 transform hover:-translate-y-1 shadow-lg hover:shadow-xl group"
              >
                📞 Book Your Free Strategy Call
              </button>
            </div>
          </div>
        </div>
      </Container>
    </div>
  );
};