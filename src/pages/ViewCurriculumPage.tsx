import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { Container } from '../components/Container';
import { Button } from '../components/Button';
import { BookOpen, ArrowLeft, Calendar, Download, Loader2, Sparkles } from 'lucide-react';

interface CurriculumData {
  id: string;
  user_email: string;
  course_idea: string;
  generated_modules: Array<{ id: number; title: string }>;
  full_curriculum_content: string;
  created_at: string;
}

export const ViewCurriculumPage = () => {
  const { token } = useParams<{ token: string }>();
  const [curriculum, setCurriculum] = useState<CurriculumData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchCurriculum = async () => {
      if (!token) {
        setError('Invalid curriculum link');
        setLoading(false);
        return;
      }

      try {
        const { createClient } = await import('@supabase/supabase-js');
        const supabase = createClient(
          import.meta.env.VITE_SUPABASE_URL,
          import.meta.env.VITE_SUPABASE_ANON_KEY
        );

        const { data, error: fetchError } = await supabase
          .from('generated_curricula')
          .select('*')
          .eq('access_token', token)
          .single();

        if (fetchError) {
          console.error('Fetch error:', fetchError);
          setError('Curriculum not found or access denied');
          return;
        }

        setCurriculum(data);
      } catch (err) {
        console.error('Error fetching curriculum:', err);
        setError('Failed to load curriculum');
      } finally {
        setLoading(false);
      }
    };

    fetchCurriculum();
  }, [token]);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const downloadAsPDF = () => {
    // Create a simple text file download for now
    // In production, you'd want to use a proper PDF generation library
    const content = `
Course Curriculum
Generated on: ${curriculum ? formatDate(curriculum.created_at) : ''}

Course Idea: ${curriculum?.course_idea || ''}

${curriculum?.full_curriculum_content || ''}

---
Generated by BuildMaCourse
https://buildmacourse.com
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'my-course-curriculum.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-brand-black via-gray-900 to-brand-black pt-20 sm:pt-24 lg:pt-32 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-12 h-12 animate-spin text-brand-purple mx-auto mb-4" />
          <p className="text-brand-gray">Loading your curriculum...</p>
        </div>
      </div>
    );
  }

  if (error || !curriculum) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-brand-black via-gray-900 to-brand-black pt-20 sm:pt-24 lg:pt-32">
        <Container>
          <div className="max-w-2xl mx-auto text-center">
            <div className="bg-gradient-to-br from-brand-black/50 to-gray-900/50 backdrop-blur-sm rounded-3xl p-8 sm:p-12 border border-red-500/20">
              <h1 className="text-2xl sm:text-3xl font-bold text-brand-white mb-4">
                Curriculum Not Found
              </h1>
              <p className="text-brand-gray mb-8">
                {error || 'The curriculum you\'re looking for doesn\'t exist or has been removed.'}
              </p>
              <Link to="/generate-curriculum">
                <Button variant="primary">
                  <Sparkles className="w-4 h-4 mr-2" />
                  Generate New Curriculum
                </Button>
              </Link>
            </div>
          </div>
        </Container>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-brand-black via-gray-900 to-brand-black pt-20 sm:pt-24 lg:pt-32">
      <Container>
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <Link
              to="/generate-curriculum"
              className="inline-flex items-center gap-2 text-brand-purple hover:text-brand-purple-dark font-medium transition-colors group"
            >
              <ArrowLeft className="w-4 h-4 group-hover:-translate-x-1 transition-transform" />
              Generate Another Curriculum
            </Link>
            
            <button
              onClick={downloadAsPDF}
              className="inline-flex items-center gap-2 text-brand-gray hover:text-brand-white font-medium transition-colors"
            >
              <Download className="w-4 h-4" />
              Download
            </button>
          </div>

          {/* Success Message */}
          <div className="text-center mb-8">
            <div className="inline-flex items-center gap-2 bg-green-500/20 text-green-400 px-4 py-2 rounded-full text-sm font-medium mb-4">
              <BookOpen className="w-4 h-4" />
              ðŸŽ‰ Your Curriculum is Ready!
            </div>
          </div>

          {/* Curriculum Content */}
          <div className="bg-gradient-to-br from-brand-black/50 to-gray-900/50 backdrop-blur-sm rounded-3xl p-6 sm:p-8 lg:p-12 border border-brand-purple/20 shadow-2xl mb-8">
            {/* Header Info */}
            <div className="text-center mb-8 sm:mb-12">
              <p className="text-sm text-brand-gray mb-4">
                Generated on {formatDate(curriculum.created_at)}
              </p>
              <div className="bg-brand-purple/10 border border-brand-purple/20 rounded-xl p-4 mb-6">
                <p className="text-brand-white font-medium">
                  <strong>Course Idea:</strong> {curriculum.course_idea}
                </p>
              </div>
            </div>

            {/* Module Overview */}
            {curriculum.generated_modules && curriculum.generated_modules.length > 0 && (
              <div className="mb-8 sm:mb-12">
                <h3 className="text-xl sm:text-2xl font-bold text-brand-white mb-6">
                  Course Modules Overview
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {curriculum.generated_modules.map((module) => (
                    <div key={module.id} className="flex items-center gap-3 p-4 bg-brand-black/30 rounded-xl">
                      <div className="w-8 h-8 rounded-full bg-brand-purple/20 text-brand-purple flex items-center justify-center font-bold text-sm">
                        {module.id}
                      </div>
                      <span className="text-brand-white font-medium">{module.title}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Full Curriculum Content */}
            <div className="prose prose-lg prose-invert max-w-none">
              <h3 className="text-xl sm:text-2xl font-bold text-brand-white mb-6">
                Complete Curriculum Details
              </h3>
              <div 
                className="text-brand-gray leading-relaxed whitespace-pre-wrap"
                style={{ lineHeight: '1.7' }}
              >
                {curriculum.full_curriculum_content}
              </div>
            </div>
          </div>

          {/* What's Next Section */}
          <div className="bg-gradient-to-r from-brand-purple to-brand-purple-dark text-white p-6 sm:p-8 lg:p-12 rounded-3xl shadow-purple-lg">
            <div className="text-center">
              <h2 className="text-2xl sm:text-3xl font-bold mb-4 font-bricolage">
                What's Next?
              </h2>
              <p className="text-lg sm:text-xl text-purple-100 mb-6 max-w-3xl mx-auto">
                Now that you have a complete, professional curriculum, the next critical step is to validate it. 
                How can you be 100% sure people will pay for this before you spend months building it?
              </p>
              <p className="text-xl font-semibold text-white mb-8">
                That's exactly what we help with at BuildMaCourse.
              </p>
              
              <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                <Button
                  variant="secondary"
                  size="lg"
                  onClick={() => window.location.href = '/#schedule-call'}
                  className="bg-white text-brand-purple hover:bg-gray-50 shadow-lg hover:shadow-xl transform hover:-translate-y-1"
                >
                  <Calendar className="w-5 h-5 mr-2" />
                  Book Your Free Strategy Call
                </Button>
                <Link to="/generate-curriculum">
                  <Button variant="outline" size="lg" className="border-white text-white hover:bg-white hover:text-brand-purple">
                    <Sparkles className="w-4 h-4 mr-2" />
                    Generate Another Curriculum
                  </Button>
                </Link>
              </div>
            </div>
          </div>
        </div>
      </Container>
    </div>
  );
};